// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  name       String?
  lastName   String?
  password   String
  email      String   @unique
  role       UserRole @default(PATIENT)
  speciality String?

  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  patientAppoinments Appointment[] @relation("PatientAppointments")
  doctorAppoinments  Appointment[] @relation("DoctorAppointments")
  Appointment        Appointment[]

  @@map("users")
}

enum UserRole {
  PATIENT
  DOCTOR
}

model Appointment {
  id        Int      @id @default(autoincrement())
  date      DateTime
  patient   User     @relation("PatientAppointments", fields: [patientId], references: [id])
  patientId Int
  doctor    User     @relation("DoctorAppointments", fields: [doctorId], references: [id])
  doctorId  Int

  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  status    AppointmentStatus

  paymentId String? @unique

  User   User? @relation(fields: [userId], references: [id])
  userId Int?

  @@map("appointments")
}

enum AppointmentStatus {
  PENDING_FOR_PAYMENT
  PENDING_FOR_CONFIRMATION
  PAYMENT_FAILED
  CONFIRMED
  CANCELLED
  FINISHED
}

model Seed {
  id        Int      @id @default(autoincrement())
  seed      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("seeds")
}
